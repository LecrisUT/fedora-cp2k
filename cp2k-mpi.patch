diff -up cp2k-2.7.0/src/dbcsr/data/dbcsr_data_methods.F.mpi cp2k-2.7.0/src/dbcsr/data/dbcsr_data_methods.F
--- cp2k-2.7.0/src/dbcsr/data/dbcsr_data_methods.F.mpi	2015-09-08 22:52:01.000000000 +0200
+++ cp2k-2.7.0/src/dbcsr/data/dbcsr_data_methods.F	2015-09-09 10:47:37.343021420 +0200
@@ -52,6 +52,9 @@ MODULE dbcsr_data_methods
                                              int_8,&
                                              real_4,&
                                              real_8
+#ifdef __parallel
+  USE message_passing,                 ONLY: mp_address_kind
+#endif
 
   IMPLICIT NONE
 
@@ -275,7 +278,11 @@ CONTAINS
     TYPE(dbcsr_data_obj), INTENT(INOUT)      :: area
     TYPE(dbcsr_data_obj), INTENT(IN)         :: template_area
     INTEGER, INTENT(IN)                      :: size_data
+#ifdef __parallel
+    INTEGER(kind=mp_address_kind), INTENT(IN):: displ
+#else
     INTEGER(kind=int_8), INTENT(IN)          :: displ
+#endif
 
     CHARACTER(len=*), PARAMETER :: &
       routineN = 'dbcsr_data_copy_frombuffer_obj', &
@@ -341,7 +348,11 @@ CONTAINS
     TYPE(dbcsr_data_obj), INTENT(INOUT)      :: area
     INTEGER, DIMENSION(:), INTENT(IN)        :: template_area
     INTEGER, INTENT(IN)                      :: size_data
+#ifdef __parallel
+    INTEGER(kind=mp_address_kind), INTENT(IN):: displ
+#else
     INTEGER(kind=int_8), INTENT(IN)          :: displ
+#endif
 
     CHARACTER(len=*), PARAMETER :: routineN = 'dbcsr_data_copy_frombuffer_i', &
       routineP = moduleN//':'//routineN
diff -up cp2k-2.7.0/src/dbcsr/mm/dbcsr_mm_cannon.F.mpi cp2k-2.7.0/src/dbcsr/mm/dbcsr_mm_cannon.F
--- cp2k-2.7.0/src/dbcsr/mm/dbcsr_mm_cannon.F.mpi	2015-09-08 22:52:01.000000000 +0200
+++ cp2k-2.7.0/src/dbcsr/mm/dbcsr_mm_cannon.F	2015-09-09 10:57:26.243589566 +0200
@@ -4049,7 +4049,11 @@ MODULE dbcsr_mm_cannon
   SUBROUTINE count_mpi_statistics(mpi_statistics,data_size,&
                                   size_breakdown,element_size_bytes)
     REAL, DIMENSION(:), INTENT(INOUT)        :: mpi_statistics
+#ifdef __parallel
+    INTEGER(KIND=mp_address_kind), INTENT(IN):: data_size
+#else
     INTEGER(KIND=int_8), INTENT(IN)          :: data_size
+#endif
     INTEGER(KIND=int_8), DIMENSION(:, :), &
       INTENT(INOUT), OPTIONAL                :: size_breakdown
     INTEGER, INTENT(IN), OPTIONAL            :: element_size_bytes
